7889-Kundtsches Rohr
--------------------

The software is based on a Python script and an Arduino sketch.
The Python script generates the sound while the frequency and volume comes from the serial communication generated by the Arduino sketch.
Also the Python script does the reset sequences and sends a serial signal to the Arduino while doing so.



Installation and Changing the Scripts
-------------------------------------

The Python script relies on PyAudio. PyAudio is best installed from the repositories of Ubuntu, Debian, etc.

1. First, we need the development (headers, libraries) for Python, these are used later to build PyAudio from source (by PIP):
     - sudo apt-get install python-dev

2. Also the development files for PortAudio are needed for the build:
     - sudo apt-get install portaudio19-dev

3. If PIP is not already installed run:
     - sudo apt-get install pip

4. Now we can download, build and install PyAudio with PIP:
     - sudo pip install --upgrade pyaudio


For an efficient wave generation we rely on Cython and NumPy.

5. Install cython and numpy from the standard repositories as well:
     - sudo apt-get install cython python-numpy


The Arduino sketch is uploaded best with a USB connection from within the Arudino IDE, note that the Arduino is a Arduino Due (3.5v).

6. Download and install the Arduino IDE and upload the sketch (ino-file).


The Python script files and the shell script should be placed in the home directory of the user,
in the standard Ubunutu images from Udoo, this is: /home/ubuntu/

There are several ways to work with the Udoo:

7a. Connect the Udoo to a network and connect via SSH.
     - ssh ubuntu@192.168.1.200  (where 192.168.1.200 should be replaced with the current IP of the device)
    Upload and download files with scp - please refer to the scp manpage for help.
     - scp -pr . ubuntu@192.168.10.219:/home/ubuntu/
    Edit files via SSH with nano or vi ...
     - nano sind-generator.py

7b. Use the SD card directly:  Take the SD card and modify the files from another linux installation.

7c. Connect a screen, keyboard and mouse to the Udoo and work from there.

7d. Do a remote desktop connection to the Udoo.
     - vncviewer 192.168.10.200:5901    (where 192.168.1.200 should be replaced with the current IP of the device)


8. To start the Python script on boot, we used ".profile" file. Just add the "run.sh" file there. Add a "&" to avoid blocking the system.
     - /home/ubuntu/project/soundwave/run.sh & 


Customizing the Script
----------------------

There are several variables located at the top of the sine-genertor.py script which can be changed.

Please note, the reset-sequence is started if both - the activity_reset_at and the inactivity_reset_at are both reached.

- activity_reset_at
    Acitity time (in total) at which the reset-sequence is triggered. Defaults to 120 seconds.
    
- inactivity_reset_at
    Inactivity time at which the reset-sequence is triggered. Defaults to 5 seconds.
    
- max_volume
    Maximum volume for the normal operation. This scales down the operation volume - not the reset sequence volume. Defaults to 0.5 (50%).
    
- lock_while_reset
    Sends the lock/unlock serial signal to the Arduino while in the reset-sequency. Defaults to True.
    
- reset
    The reset sequence is a tuple of dictionaries. Please look at the source code, it is easy to read and understand.
    The "frequency", "time" and "volume" fields can be changed. Also you may add or remove entries from the list.
    

